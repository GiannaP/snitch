// Copyright 2020 ETH Zurich and University of Bologna.
// Solderpad Hardware License, Version 0.51, see LICENSE for details.
// SPDX-License-Identifier: SHL-0.51

// Author: Alessandro Ottaviano <aottaviano@iis.ee.ethz.ch>
//
// AUTOMATICALLY GENERATED by genoccamy.py; edit the script instead.

module occamy_xilinx_bootrom_wrap
import occamy_pkg::*;
(
  input  logic                                            clk_i,
  input  logic                                            rst_ni,
  input  ${soc_regbus_periph_xbar.out_bootrom.req_type()} bootrom_req_i,
  output ${soc_regbus_periph_xbar.out_bootrom.rsp_type()} bootrom_rsp_o
);

  /// Boot ROM signals
  logic                                             bootrom_en;
  logic [$clog2(DepthRom)-1:0]                      bootrom_addr;
  logic [WidthRom-1:0]                              bootrom_data;


  logic                                             bootrom_req_ready_d, bootrom_req_ready_q;

  assign bootrom_en          = bootrom_req_i.valid;
  assign bootrom_addr        = bootrom_req_i.addr >> 2; // 32-bit addressed
  assign bootrom_rsp_o.ready = bootrom_req_ready_q;
  assign bootrom_rsp_o.rdata = bootrom_data;
  assign bootrom_rsp_o.error = '0;
  assign bootrom_req_ready_d = bootrom_req_i.valid & ~bootrom_req_ready_q;

  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      bootrom_req_ready_q <= 1'b0;
    end else begin
      bootrom_req_ready_q <= bootrom_req_ready_d;
    end
  end

  // Boot ROM module
  occamy_xilinx_bootrom #(
    .Depth   (DepthRom),
    .Dw      (WidthRom)
  ) i_occamy_bootrom (
    .clk_i,
    .req_i   (bootrom_en),
    .addr_i  (bootrom_addr),
    .rdata_o (bootrom_data)
  );

endmodule
